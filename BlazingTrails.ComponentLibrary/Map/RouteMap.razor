@using Microsoft.JSInterop

@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@implements IDisposable

<div class="map-wrapper">
    <div class="controls">
        <button @onclick="DeleteLastWaypoint"
                class="btn btn-secondary" title="Delete last waypoint"
                type="button">
            <i class="bi bi-trash"></i> Remove Last Waypoint
        </button>
    </div>
    <div style="height: @(Height); width:@(Width);" @ref="_map"></div>
</div>
 
@code {
    private ElementReference _map;
    private IJSObjectReference? _routeMapModule;
    private DotNetObjectReference<RouteMap> _routeMapReference;
 
    [Parameter] public string Height {get; set;} = "500px";
    [Parameter] public string Width {get; set;}  = "1000px";
 
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_routeMapModule is not null)
        {
            await _routeMapModule.DisposeAsync();
        }
    } 
    public async Task DeleteLastWaypoint()
    {
        if (_routeMapModule is not null)
        {
            var message = await _routeMapModule
        .InvokeAsync<string>("deleteLastWaypoint", _map);
            Console.WriteLine(message);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _routeMapModule = await JSRuntime
            .InvokeAsync<IJSObjectReference>("import", "./_content/BlazingTrails.ComponentLibrary/Map/RouteMap.razor.js");
            _routeMapReference = DotNetObjectReference.Create(this);
        
            await _routeMapModule.InvokeVoidAsync("initialize", _map, _routeMapReference);
        }
    }
 
    [JSInvokable]
    public void WaypointAdded(decimal latitude, decimal longitude)
        => Console.WriteLine($"Added Waypoint - Latitude: {latitude}, Longitude {longitude}");
    
    void IDisposable.Dispose() => 
        _routeMapReference?.Dispose();
}